{"version":3,"sources":["serviceWorker.js","components/Header/Header.js","components/ArticleCard/ArticleCard.js","flux/actions/ClipAction.js","components/ArticleList/ArticleList.js","components/CategoryButton/CategoryButton.js","categoryList.js","components/Category/Category.js","pages/home/HomePage.js","pages/clip/ClipPage.js","flux/reducers/ClipReducer.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","withRouter","path","pathname","className","to","ArticleCard","article","useContext","ClipContext","clipState","clipDispatch","isClipped","clipArticles","some","clipArticle","url","style","backgroundImage","urlToImage","href","target","rel","title","slice","onClick","type","createClip","icon","faCheckSquare","faSquare","ArticleList","articles","map","key","CategoryButton","children","handleCategoryContext","category","handleCategory","categories","Category","createContext","HomePage","useState","setCategory","setArticles","loading","setLoading","error","setError","useEffect","fetchArticles","a","process","URL","axios","get","res","data","console","Provider","value","faSpinner","ClipPage","clipReducer","state","action","filter","App","useReducer","dispatch","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"ubAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCGSC,G,MAAAA,aAjBA,SAAC,GAAkB,IAC1BC,EADyB,EAAfJ,SACMK,SAEtB,OACE,yBAAKC,UAAU,UACb,kBAAC,IAAD,CAAMA,UAAoB,MAATF,EAAe,SAAW,WAAYG,GAAG,KAA1D,wCAIA,kBAAC,IAAD,CAAMD,UAAoB,UAATF,EAAmB,SAAW,WAAYG,GAAG,SAA9D,6C,0DCkCSC,G,MAxCK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACCC,qBAAWC,GAAvCC,EAD2B,EAC3BA,UAAWC,EADgB,EAChBA,aAGbC,EAAY,WAChB,OAAOF,EAAUG,aAAaC,MAC5B,SAACC,GAAD,OAAiBA,EAAYC,MAAQT,EAAQS,QAajD,OACE,yBAAKZ,UAAU,QACb,yBACEA,UAAU,QACVa,MAAO,CAAEC,gBAAgB,OAAD,OAASX,EAAQY,WAAjB,QAG1B,yBAAKf,UAAU,SACb,uBAAGgB,KAAMb,EAAQS,IAAKK,OAAO,SAASC,IAAI,uBACvCf,EAAQgB,MAAMC,MAAM,EAAG,IAD1B,QAKF,yBAAKpB,UAAU,OAAOqB,QArBP,WACbb,IACFD,ECbG,CAAEe,KAAM,cAAenB,QDaF,CAAEQ,YAAaR,GCdhBQ,cDgBvBJ,ECrBoB,SAAC,GACzB,MAAO,CAAEe,KAAM,cAAenB,QADe,EAAlBQ,aDqBVY,CAAW,CAAEZ,YAAaR,OAiBvC,2BAEE,kBAAC,IAAD,CAAiBqB,KAAMhB,IAAciB,IAAgBC,UE3B9CC,G,MAVK,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACrB,OACE,yBAAK5B,UAAU,gBACZ4B,EAASC,KAAI,SAAC1B,GAAD,OACZ,kBAAC,EAAD,CAAa2B,IAAK3B,EAAQS,IAAKT,QAASA,UCSjC4B,G,MAbQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACF5B,qBAAW6B,GAAxCC,EAD+B,EAC/BA,SAAUC,EADqB,EACrBA,eAElB,OACE,4BACEnC,UAAWkC,IAAaF,EAAW,UAAY,YAC/CX,QAAS,kBAAMc,EAAeH,KAE7BA,KCXMI,EAAa,CACxB,WACA,gBACA,UACA,SACA,UACA,SACA,cCOaC,G,MAVE,WACf,OACE,yBAAKrC,UAAU,YACZoC,EAAWP,KAAI,SAACK,GAAD,OACd,kBAAC,EAAD,CAAgBJ,IAAKI,GAAWA,SCC3BD,G,YAAwBK,2BAyDtBC,EAvDE,WAAO,IAAD,EACWC,mBAASJ,EAAW,IAD/B,mBACdF,EADc,KACJO,EADI,OAEWD,mBAAS,IAFpB,mBAEdZ,EAFc,KAEJc,EAFI,OAGSF,oBAAS,GAHlB,mBAGdG,EAHc,KAGLC,EAHK,OAIKJ,mBAAS,IAJd,mBAIdK,EAJc,KAIPC,EAJO,KAMrBC,qBAAU,WACRC,MACC,CAACd,IAGJ,IAAMc,EAAa,uCAAG,8BAAAC,EAAA,sEAElBL,GAAW,GACIM,mCACTC,EAJY,kEAIqDjB,EAJrD,mBAGHgB,oCAHG,SAKAE,IAAMC,IAAIF,GALV,OAKZG,EALY,OAMlBZ,EAAYY,EAAIC,KAAK3B,UAKrBgB,GAAW,GAXO,kDAalBA,GAAW,GACXE,EAAS,EAAD,IACRU,QAAQX,MAAR,MAfkB,0DAAH,qDAmBnB,OACE,yBAAK7C,UAAU,aAEb,kBAACiC,EAAsBwB,SAAvB,CACEC,MAAO,CACLxB,SAAUA,EACVC,eAAgB,SAACH,GAAD,OAAcS,EAAYT,MAG5C,kBAAC,EAAD,OAEDW,EACC,4BACE,kBAAC,IAAD,CAAiBnB,KAAMmC,MADzB,2CAIGd,EAGH,0HAFA,kBAAC,EAAD,CAAajB,SAAUA,MChDhBgC,G,MANE,WAAO,IACdtD,EAAcF,qBAAWC,GAAzBC,UAER,OAAO,kBAAC,EAAD,CAAasB,SAAUtB,EAAUG,iB,gBCS3BoD,EAhBK,SAACC,EAAOC,GAC1B,OAAQA,EAAOzC,MACb,IAAK,cACH,OAAO,2BAAKwC,GAAZ,IAAmBrD,aAAa,GAAD,mBAAMqD,EAAMrD,cAAZ,CAA0BsD,EAAO5D,YAClE,IAAK,cACH,OAAO,2BACF2D,GADL,IAEErD,aAAcqD,EAAMrD,aAAauD,QAC/B,SAACrD,GAAD,OAAiBA,EAAYC,MAAQmD,EAAO5D,QAAQS,SAG1D,QACE,OAAOkD,ICLAzD,G,MAAciC,2BAmBZ2B,EAjBH,WAAO,IAAD,EACUC,qBAAWL,EAAa,CAAEpD,aAAc,KADlD,mBACTqD,EADS,KACFK,EADE,KAGhB,OAEE,kBAAC9D,EAAYoD,SAAb,CAAsBC,MAAO,CAAEpD,UAAWwD,EAAOvD,aAAc4D,IAC7D,6BACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACtE,KAAK,IAAIuE,UAAW9B,IACjC,kBAAC,IAAD,CAAOzC,KAAK,QAAQuE,UAAWT,Q,MCbzCU,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SZwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLW,QAAQX,MAAMA,EAAMoC,c","file":"static/js/main.72565720.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { Link, withRouter } from 'react-router-dom'\nimport './Header.scss'\n\nconst Header = ({ location }) => {\n  const path = location.pathname\n\n  return (\n    <div className='header'>\n      <Link className={path === '/' ? 'active' : 'inactive'} to='/'>\n        ニュース一覧\n      </Link>\n\n      <Link className={path === '/clip' ? 'active' : 'inactive'} to='/clip'>\n        後で読む記事\n      </Link>\n    </div>\n  )\n}\n\n// App.jsでHeaderコンポーネントはRouteを経由していないためwithRouterでラップしてパスを取得\nexport default withRouter(Header)\n","import React, { useContext } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCheckSquare, faSquare } from '@fortawesome/free-solid-svg-icons'\nimport { createClip, deleteClip } from '../../flux/actions/ClipAction'\nimport { ClipContext } from '../../App'\nimport './ArticleCard.scss'\n\nconst ArticleCard = ({ article }) => {\n  const { clipState, clipDispatch } = useContext(ClipContext)\n\n  // すでにWebクリップされた記事かどうかを判定\n  const isClipped = () => {\n    return clipState.clipArticles.some(\n      (clipArticle) => clipArticle.url === article.url\n    )\n  }\n\n  // Webクリップをチェックした際の処理\n  const handleClip = () => {\n    if (isClipped()) {\n      clipDispatch(deleteClip({ clipArticle: article }))\n    } else {\n      clipDispatch(createClip({ clipArticle: article }))\n    }\n  }\n\n  return (\n    <div className='card'>\n      <div\n        className='image'\n        style={{ backgroundImage: `url(${article.urlToImage})` }}\n      />\n\n      <div className='title'>\n        <a href={article.url} target='_blank' rel='noopener noreferrer'>\n          {article.title.slice(0, 80)}...\n        </a>\n      </div>\n\n      <div className='clip' onClick={handleClip}>\n        後で読む\n        <FontAwesomeIcon icon={isClipped() ? faCheckSquare : faSquare} />\n      </div>\n    </div>\n  )\n}\n\nexport default ArticleCard\n","// Webクリップの追加アクション\nexport const createClip = ({ clipArticle }) => {\n  return { type: 'CREATE_CLIP', article: clipArticle }\n}\n\n// Webクリップの削除アクション\nexport const deleteClip = ({ clipArticle }) => {\n  return { type: 'DELETE_CLIP', article: clipArticle }\n}\n","import React from 'react'\nimport ArticleCard from '../ArticleCard/ArticleCard'\nimport './ArticleList.scss'\n\nconst ArticleList = ({ articles }) => {\n  return (\n    <div className='article-list'>\n      {articles.map((article) => (\n        <ArticleCard key={article.url} article={article} />\n      ))}\n    </div>\n  )\n}\n\nexport default ArticleList\n","import React, { useContext } from 'react'\nimport { handleCategoryContext } from '../../pages/home/HomePage'\nimport './CategoryButton.scss'\n\nconst CategoryButton = ({ children }) => {\n  const { category, handleCategory } = useContext(handleCategoryContext)\n\n  return (\n    <button\n      className={category === children ? 'clicked' : 'unclicked'}\n      onClick={() => handleCategory(children)}\n    >\n      {children}\n    </button>\n  )\n}\n\nexport default CategoryButton\n","// News APIのカテゴリーを登録\nexport const categories = [\n  'business',\n  'entertainment',\n  'general',\n  'health',\n  'science',\n  'sports',\n  'technology',\n]\n","import React from 'react'\nimport CategoryButton from '../CategoryButton/CategoryButton'\nimport { categories } from '../../categoryList'\nimport './Category.scss'\n\nconst Category = () => {\n  return (\n    <div className='category'>\n      {categories.map((category) => (\n        <CategoryButton key={category}>{category}</CategoryButton>\n      ))}\n    </div>\n  )\n}\n\nexport default Category\n","import React, { useState, useEffect, createContext } from 'react'\nimport axios from 'axios'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons'\nimport ArticleList from '../../components/ArticleList/ArticleList'\nimport Category from '../../components/Category/Category'\nimport { categories } from '../../categoryList'\nimport news from '../../news.json'\nimport './HomePage.scss'\n\nexport const handleCategoryContext = createContext()\n\nconst HomePage = () => {\n  const [category, setCategory] = useState(categories[0])\n  const [articles, setArticles] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState('')\n\n  useEffect(() => {\n    fetchArticles()\n  }, [category])\n\n  // News APIから特定カテゴリーのニュースデータを取得\n  const fetchArticles = async () => {\n    try {\n      setLoading(true)\n      const apiKey = process.env.REACT_APP_NEWS_API_KEY\n      const URL = `http://newsapi.org/v2/top-headlines?country=jp&category=${category}&apiKey=${apiKey}`\n      const res = await axios.get(URL)\n      setArticles(res.data.articles)\n      // テスト用にローカルに保存したNewsデータを利用する場合は、下3行のコメントを外し上3行をコメントアウト\n      // let data = JSON.stringify(news)\n      // data = JSON.parse(data)\n      // setArticles(data.articles)\n      setLoading(false)\n    } catch (err) {\n      setLoading(false)\n      setError(err)\n      console.error(err)\n    }\n  }\n\n  return (\n    <div className='home-page'>\n      {/* 子コンポーネントにカテゴリー情報とコールバック関数を渡すためにコンテキストを利用 */}\n      <handleCategoryContext.Provider\n        value={{\n          category: category,\n          handleCategory: (children) => setCategory(children),\n        }}\n      >\n        <Category />\n      </handleCategoryContext.Provider>\n      {loading ? (\n        <h1>\n          <FontAwesomeIcon icon={faSpinner} />\n          データ取得中...\n        </h1>\n      ) : !error ? (\n        <ArticleList articles={articles} />\n      ) : (\n        <h1>データを取得できませんでした。</h1>\n      )}\n    </div>\n  )\n}\n\nexport default HomePage\n","import React, { useContext } from 'react'\nimport { ClipContext } from '../../App'\nimport ArticleList from '../../components/ArticleList/ArticleList'\nimport './ClipPage.scss'\n\nconst ClipPage = () => {\n  const { clipState } = useContext(ClipContext)\n\n  return <ArticleList articles={clipState.clipArticles} />\n}\n\nexport default ClipPage\n","// Webクリップの追加と削除を制御するReducer\nconst clipReducer = (state, action) => {\n  switch (action.type) {\n    case 'CREATE_CLIP':\n      return { ...state, clipArticles: [...state.clipArticles, action.article] }\n    case 'DELETE_CLIP':\n      return {\n        ...state,\n        clipArticles: state.clipArticles.filter(\n          (clipArticle) => clipArticle.url !== action.article.url\n        ),\n      }\n    default:\n      return state\n  }\n}\n\nexport default clipReducer\n","import React, { useReducer, createContext } from 'react'\nimport { Switch, Route } from 'react-router-dom'\nimport Header from './components/Header/Header'\nimport HomePage from './pages/home/HomePage'\nimport ClipPage from './pages/clip/ClipPage'\nimport clipReducer from './flux/reducers/ClipReducer'\nimport './App.scss'\n\nexport const ClipContext = createContext()\n\nconst App = () => {\n  const [state, dispatch] = useReducer(clipReducer, { clipArticles: [] })\n\n  return (\n    // 子コンポーネントでWebクリップ用のstateとdispatchを共有できるように設定\n    <ClipContext.Provider value={{ clipState: state, clipDispatch: dispatch }}>\n      <div>\n        <Header />\n        <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/clip' component={ClipPage} />\n        </Switch>\n      </div>\n    </ClipContext.Provider>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport App from './App'\nimport './index.scss'\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}